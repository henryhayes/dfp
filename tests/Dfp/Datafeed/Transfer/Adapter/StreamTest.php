<?php
include_once 'vfsStream/vfsStream.php';
/**
 * Test class for Dfp_Datafeed_Transfer
 * Generated by PHPUnit on 2011-12-09 at 10:59:43.
 *
 */
class Dfp_Datafeed_Transfer_Adapter_StreamTest extends PHPUnit_Framework_TestCase
{
    public function test__construct()
    {
        $passed = false;
        try {
            $sut = new Dfp_Datafeed_Transfer_Adapter_Stream('hello');
        } catch (Dfp_Datafeed_Transfer_Adapter_Exception $e) {
            if ($e->getMessage() == 'Invalid parameter to constructor') {
                $passed  = true;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream(array('host'=>'test.com'));
        $this->assertEquals('test.com', $sut->getHost());

        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream(new Zend_Config(array('port'=>2222)));
        $this->assertEquals(2222, $sut->getPort());

    }

    public function testSetSchema()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setSchema('ftp');

        $this->assertEquals('ftp', $sut->getSchema());
    }

    public function testGetSchema()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $this->assertEquals('http', $sut->getSchema());
    }

    public function testSetHost()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setHost('example.com');

        $this->assertEquals('example.com', $sut->getHost());
    }

    public function testGetHost()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $this->assertNull($sut->getHost());
    }

    public function testSetPort()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setPort('2222');

        $this->assertEquals('2222', $sut->getPort());
    }

    public function testGetPort()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $this->assertNull($sut->getPort());
    }

    public function testSetUsername()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setUsername('user');

        $this->assertEquals('user', $sut->getUsername());
    }

    public function testGetUsername()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $this->assertNull($sut->getUsername());
    }

    public function testSetPassword()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setPassword('pass');

        $this->assertEquals('pass', $sut->getPassword());
    }

    public function testGetPassword()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $this->assertNull($sut->getPassword());
    }

    public function testSetBasePath()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setBasePath('C:\\feedfiles\\');

        $this->assertEquals('C:\\feedfiles', $sut->getBasePath());
    }

    public function testGetBasePath()
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $this->assertNull($sut->getBasePath());
    }

    /**
     * @dataProvider setOptionsProvider
     */
    public function testSetOptions($var, $valid, $invalid, $message, $method)
    {
        $options[$var] = $invalid;
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();

        $passed = false;
        try {
            $sut->setOptions($options);
        } catch (Dfp_Datafeed_Transfer_Exception $e) {
            if ($e->getMessage = $message) {
                $passed = True;
            }
        }

        $this->assertTrue($passed, 'Exception not thrown');

        $options[$var] = $valid;

        $sut->setOptions($options);

        $this->assertEquals($valid, $sut->{'get' . $method}());
    }

    public function setOptionsProvider()
    {
        return array(
            array('schema', 'ftp', array(), 'Invalid Schema', 'Schema'),
            array('host', 'example.com', array(), 'Invalid Host', 'Host'),
            array('port', '2222', array(), 'Invalid Port', 'Port'),
            array('username', 'user', array(), 'Invalid Username', 'Username'),
            array('password', 'pass', array(), 'Invalid Password', 'Password'),
            array('basepath', 'C:\\feedfiles', array(), 'Invalid Basepath', 'BasePath'),
        );
    }

    /**
    * @dataProvider getUriProvider
    */
    public function testGetUri($options, $expected, $expectedException = null)
    {
        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setOptions($options);
        try {
            $uri = $sut->getUri();
        } catch (Dfp_Datafeed_Transfer_Exception $e){
            if (!is_null($expectedException)) {
                $this->assertEquals($e->getMessage(),$expectedException);
                return;
            }
        }

        $this->assertEquals($expected, $uri);
    }

    public function getUriProvider()
    {
        return array(
            array(array(), null, 'Host must be set'),
            array(array('host'=>'ftp.example.com', 'schema'=>'ftp'), 'ftp://ftp.example.com'),
            array(array('host'=>'ftp.example.com', 'schema'=>'ftp', 'username'=>'user'), 'ftp://user@ftp.example.com'),
            array(array('host'=>'ftp.example.com', 'schema'=>'ftp', 'password'=>'pass'), 'ftp://ftp.example.com'),
            array(array('host'=>'ftp.example.com', 'schema'=>'ftp', 'port'=>'2222'), 'ftp://ftp.example.com:2222'),
            array(
                array('host'=>'ftp.example.com', 'schema'=>'ftp', 'username'=>'user', 'password'=>'pass'),
                'ftp://user:pass@ftp.example.com'
            ),
        );
    }

    public function testRetrieveFile()
    {
        $dir = vfsStream::setup('base');

        mkdir('vfs://base/src');
        mkdir('vfs://base/dest');

        file_put_contents('vfs://base/src/test.csv', 'testdata');

        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setHost('base/src');
        $sut->setSchema('vfs');
        $sut->setBasePath('vfs://base/dest');

        $sut->retrieveFile('test.csv');

        $this->assertEquals('testdata', file_get_contents('vfs://base/dest/test.csv'));

        $sut->retrieveFile('test.csv', 'test2.csv');
        $this->assertEquals('testdata', file_get_contents('vfs://base/dest/test2.csv'));
    }

    public function testSendFile()
    {
        $dir = vfsStream::setup('base');

        mkdir('vfs://base/src');
        mkdir('vfs://base/dest');

        file_put_contents('vfs://base/src/test.csv', 'testdata');

        $sut = new Dfp_Datafeed_Transfer_Adapter_Stream();
        $sut->setHost('base/dest');
        $sut->setSchema('vfs');
        $sut->setBasePath('vfs://base/src');

        $sut->sendFile('test.csv');

        $this->assertEquals('testdata', file_get_contents('vfs://base/dest/test.csv'));

        $sut->sendFile('test.csv', 'test2.csv');
        $this->assertEquals('testdata', file_get_contents('vfs://base/dest/test2.csv'));
    }
}