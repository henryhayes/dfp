<?php

/**
 * Test class for Dfp_Datafeed_File_Reader_Format_Csv.
 * Generated by PHPUnit on 2011-12-13 at 12:08:13.
 *
 */
class Dfp_Datafeed_File_Reader_Format_CsvTest extends PHPUnit_Framework_TestCase
{
    public function testGetDialect()
    {
        $mockFile = $this->getMock('Dfp_Datafeed_File_Reader_Format_Csv_File');
        $mockFile->expects($this->once())
                 ->method('detectDialect')
                 ->will($this->returnValue(array('quote'=>"'",'delimiter'=>';')));
        $mockFile->expects($this->once())->method('setDialect');
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv();
        $sut->setFile($mockFile);

        $dialect = $sut->getDialect();
        $this->assertInstanceOf('Dfp_Datafeed_File_Format_Csv_Dialect_Dynamic', $dialect);

        $this->assertEquals(';', $dialect->getDelimiter());
    }

    public function testSetDialect()
    {
        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Interface');
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv();
        $sut->setDialect($mockDialect);
        $this->assertSame($mockDialect, $sut->getDialect());
    }

    public function testGetFile()
    {
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv();
        $this->assertInstanceOf('Dfp_Datafeed_File_Reader_Format_Csv_File', $sut->getFile());
    }

    public function testSetFile()
    {
        $mockFile = $this->getMock('Dfp_Datafeed_File_Reader_Format_Csv_File');
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv();
        $sut->setFile($mockFile);
        $this->assertSame($mockFile, $sut->getFile());
    }

    public function testSetDialectString()
    {
        $sut = $sut = new Dfp_Datafeed_File_Reader_Format_Csv();
        $sut->setDialectString('tabs');
        $this->assertInstanceOf('Dfp_Datafeed_File_Format_Csv_Dialect_Tabs', $sut->getDialect());
    }

    public function testItterator()
    {
        $mockFile = $this->getMock('Dfp_Datafeed_File_Reader_Format_Csv_File');
        $mockDialect = $this->getMock('Dfp_Datafeed_File_Format_Csv_Dialect_Interface');

        $mockFile->expects($this->once())->method('open')->with($this->equalTo('feedfile.csv'));
        $mockFile->expects($this->exactly(2))->method('setDialect')->with($this->equalTo($mockDialect));

        $mockFile->expects($this->once())->method('detectHeader')->will($this->returnValue(array(0,1,2)));
        $mockFile->expects($this->atLeastOnce())->method('getRecord')
                 ->will(
                     $this->onConsecutiveCalls(
                         array('a', 'b', 'c'),
                         array('a', 'b', 'c'),
                         false,
                         array(null),
                         array('a','b','c','d'),
                         false
                     )
                 );
        $mockFile->expects($this->atLeastOnce())->method('getDialect')
                 ->will($this->onConsecutiveCalls(null, $mockDialect, $mockDialect, $mockDialect, $mockDialect));
        $mockFile->expects($this->atLeastOnce())->method('isEof')->will($this->onConsecutiveCalls(false, true));


        $sut = new Dfp_Datafeed_File_Reader_Format_Csv();
        $sut->setFile($mockFile);
        $sut->setLocation('feedfile.csv');


        $sut->setDialect($mockDialect);

        $i = 0;
        $reader = new Dfp_Datafeed_File_Reader();
        $reader->setFormat($sut);
        foreach ($reader AS $position => $record) {
            $this->assertEquals(++$i, $position);
            $this->assertEquals(array('a','b','c'), $record);
        }

        $this->assertEquals(2, $i);

        $this->assertTrue($sut->hasErrors());
        $this->assertEquals(array('Error on line: 3','Empty row on line: 4', 'Header row and record mismatch on line: 5'), $sut->getErrors());

    }

    public function test__construct()
    {
        $params = array(
            'location'=>'test.csv'
        );

        $c = new Zend_Config($params);

        $sut = new Dfp_Datafeed_File_Reader_Format_Csv($params);
        $this->assertEquals('test.csv', $sut->getLocation());
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv($c);
        $this->assertEquals('test.csv', $sut->getLocation());

        try {
            $sut = new Dfp_Datafeed_File_Reader_Format_Csv('string');
        } catch (Dfp_Datafeed_File_Exception $e) {
            if ($e->getMessage() == 'Invalid parameter to constructor') {
                return;
            }
        }

        $this->fail('Exception not thrown');
    }

    public function testSetDialectNamespace()
    {
        $sut = new Dfp_Datafeed_File_Reader_Format_Csv();
        $sut->setDialectNamespace('test');
        $this->assertEquals('test', $sut->getDialectNamespace());
    }
}
